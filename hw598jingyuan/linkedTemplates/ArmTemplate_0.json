{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "hw598jingyuan"
		},
		"AzureBlobStorageHisweather_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageHisweather'"
		},
		"AzureBlobStorage_AirPollutionData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_AirPollutionData'"
		},
		"GitHub connection_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub connection'"
		},
		"HttpServerAirP_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'HttpServerAirP'"
		},
		"HttpServerHisW_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'HttpServerHisW'"
		},
		"GitHub connection_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "jingyuan"
		},
		"HttpServerAirP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"HttpServerAirP_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jingyuan"
		},
		"HttpServerHisW_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org"
		},
		"HttpServerHisW_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jingyuan"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageHisweather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageHisweather_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_AirPollutionData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_AirPollutionData_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub connection_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub connection_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDE3NkNEREZBLTVCRkUtNEQ0OS05QTZGLTE4ODEwQUFGODc4Ml8zNjQ0N2YxZS1hZDBjLTRiM2EtOWVkNy00MzdkYWE1MDJhY2EiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServerAirP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerAirP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HttpServerAirP_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HttpServerAirP_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServerHisW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerHisW_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HttpServerHisW_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HttpServerHisW_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/airpollutionsinkbronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_AirPollutionData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "air_pollution/bronze",
						"container": "hwcontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "integer"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollutionData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airpollutionsinkgold')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_AirPollutionData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "air_pollution/gold",
						"container": "hwcontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollutionData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airpollutionsinksilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_AirPollutionData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "air_pollution/silver",
						"container": "hwcontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollutionData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airpollutionsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerAirP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3555"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.0565"
					},
					"end": {
						"type": "string",
						"defaultValue": "1738216800"
					},
					"start": {
						"type": "string",
						"defaultValue": "1706594400"
					},
					"appid": {
						"type": "string",
						"defaultValue": "85d5d295e6b5d280fb5e91fa360ea631"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServerAirP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hisweathersink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageHisweather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "hisweather",
						"container": "hwcontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "integer"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageHisweather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hisweathersinksilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageHisweather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "hisweather/silver",
						"container": "hwcontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageHisweather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hisweathersource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerHisW",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lon": {
						"type": "string",
						"defaultValue": "-71.0565"
					},
					"lat": {
						"type": "string",
						"defaultValue": "42.3555"
					},
					"start": {
						"type": "string",
						"defaultValue": "div(sub(ticks(addDays(utcNow(), mul(-7, add(item(), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"end": {
						"type": "string",
						"defaultValue": "div(sub(ticks(addDays(utcNow(), mul(-7, item()))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"dataType": {
						"type": "String",
						"defaultValue": "hourly"
					},
					"appid": {
						"type": "string",
						"defaultValue": "85d5d295e6b5d280fb5e91fa360ea631"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServerHisW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineairpollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "airpollution",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "airpollutionsource",
								"type": "DatasetReference",
								"parameters": {
									"lat": "42.3555",
									"lon": "-71.0565",
									"end": "1738216800",
									"start": "1706594400",
									"appid": "85d5d295e6b5d280fb5e91fa360ea631"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "airpollutionsinkbronze",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/airpollutionsource')]",
				"[concat(variables('factoryId'), '/datasets/airpollutionsinkbronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinehisweather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachGetHis",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, pipeline().parameters.weeksAgo)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetHisWeather",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "hisweathersource",
											"type": "DatasetReference",
											"parameters": {
												"lon": "-71.0565",
												"lat": "42.3555",
												"start": "@div(sub(ticks(addDays(utcNow(), mul(-7, add(item(), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)",
												"end": "@div(sub(ticks(addDays(utcNow(), mul(-7, item()))), ticks('1970-01-01T00:00:00Z')), 10000000)",
												"dataType": "hourly",
												"appid": "85d5d295e6b5d280fb5e91fa360ea631"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "hisweathersink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"weeksAgo": {
						"type": "int",
						"defaultValue": 52
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/hisweathersource')]",
				"[concat(variables('factoryId'), '/datasets/hisweathersink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historicaldata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "hisweathersink",
								"type": "DatasetReference"
							},
							"name": "HistoricalWeather"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "hisweathersinksilver",
								"type": "DatasetReference"
							},
							"name": "SinkSilver"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "DerivedTimestampLocation"
						},
						{
							"name": "FilterEmpty"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as integer), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['hwcontainer/hisweather/*.json']) ~> HistoricalWeather",
						"HistoricalWeather foldDown(unroll(),",
						"     mapColumn(",
						"          list,",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          timestamp = list.dt,",
						"          clouds_all = list.clouds.all,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, 0, timestamp),",
						"          location = 'Boston') ~> DerivedTimestampLocation",
						"DerivedTimestampLocation filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> FilterEmpty",
						"FilterEmpty derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(feels_like - 273.15, 2),",
						"          feels_like_F = round((feels_like - 273.15) * 9 / 5 + 32, 2),",
						"          temp_min_F = round((temp_min - 273.15) * 9 / 5 + 32, 2),",
						"          temp_max_F = round((temp_max - 273.15) * 9 / 5 + 32, 2),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          weather_id_value = toInteger(split(toString(weather_id), ': ')[1]),",
						"          weather_main_value = split(weather_main, ': ')[1],",
						"          weather_icon_value = split(weather_icon, ': ')[1],",
						"          weather_description_value = split(weather_description, ': ')[1]) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          list,",
						"          clouds_all,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_min_K = temp_min,",
						"          temp_max_K = temp_max,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          feels_like_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_icon_value,",
						"          weather_description_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['historical_data_silver.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/hisweathersink')]",
				"[concat(variables('factoryId'), '/datasets/hisweathersinksilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airpollution')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "airpollutionsinkbronze",
								"type": "DatasetReference"
							},
							"name": "AirPollutionSourceBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "airpollutionsinksilver",
								"type": "DatasetReference"
							},
							"name": "SinkSilver"
						}
					],
					"transformations": [
						{
							"name": "Flatten"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Filter"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "DeleteTime"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['hwcontainer/air_pollution/bronze/*.json']) ~> AirPollutionSourceBronze",
						"AirPollutionSourceBronze foldDown(unroll(list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3,",
						"          timestamp = list.dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Flatten",
						"Flatten derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(aqi) && !isNull(corrected_timestamp)) ~> Filter",
						"Filter derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          co = round(co, 2),",
						"          no = round(no, 2),",
						"          no2 = round(no2, 2),",
						"          o3 = round(o3, 2),",
						"          so2 = round(so2, 2),",
						"          pm2_5 = round(pm2_5, 2),",
						"          pm10 = round(pm10, 2),",
						"          nh3 = round(nh3, 2)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          lon,",
						"          lat,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          aqi,",
						"          nh3,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DeleteTime",
						"DeleteTime sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['air_pollution_silver.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/airpollutionsinkbronze')]",
				"[concat(variables('factoryId'), '/datasets/airpollutionsinksilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunAirPollutionFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "airpolltionflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "airpollution",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AirPollutionSourceBronze": {},
									"SinkSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/airpollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunHistoricalFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HistoricalData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "historicaldata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HistoricalWeather": {},
									"SinkSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/historicaldata')]"
			]
		}
	]
}