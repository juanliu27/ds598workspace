{
	"name": "airpollution",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "hisweathersink",
						"type": "DatasetReference"
					},
					"name": "HistoricalWeather"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "DerivedTimestampLocation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer,",
				"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as integer), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['hwcontainer/hisweather/*.json']) ~> HistoricalWeather",
				"HistoricalWeather foldDown(unroll(),",
				"     mapColumn(",
				"          coord,",
				"          list,",
				"          calctime,",
				"          city_id,",
				"          cnt,",
				"          cod,",
				"          message,",
				"          timestamp = list.dt,",
				"          clouds_all = list.clouds.all,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_min = list.main.temp_min,",
				"          temp_max = list.main.temp_max,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_deg = list.wind.deg,",
				"          wind_gust = list.wind.gust,",
				"          wind_speed = list.wind.speed",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, 0, timestamp),",
				"          location = 'Boston') ~> DerivedTimestampLocation"
			]
		}
	}
}